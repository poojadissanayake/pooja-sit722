name: Staging - Full Pipeline (testing)

on:
  push:
    branches: 
       - testing
  workflow_dispatch: 

permissions:
  contents: read
  id-token: write 

env:
  ACR_NAME: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  ACR_LOGIN_SERVER: ${{ format('{0}.azurecr.io', secrets.AZURE_CONTAINER_REGISTRY) }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}
  RG: ${{ vars.AKS_RESOURCE_GROUP }}
  AKS: ${{ vars.AKS_CLUSTER_NAME }}
  LOCATION: ${{ vars.LOCATION }}

jobs:
  infra:
    name: Infra - Provision Staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        working-directory: .terraform
        run: terraform init
      - name: Terraform Apply
        working-directory: .terraform
        env:
          TF_VAR_acr_name: ${{ env.ACR_NAME }}
          TF_VAR_staging_rg_name: ${{ env.RG }}
          TF_VAR_staging_aks_name: ${{ env.AKS }}
          TF_VAR_storage_account_name: ${{ secrets.STORAGE_ACCOUNT_NAME }}
          TF_VAR_location: ${{ env.LOCATION }}
        run: terraform apply -auto-approve

  backend_ci:
    name: Backend CI - Test, Build and Push
    runs-on: ubuntu-latest
    needs: infra
    services:
      product_db:
        image: postgres:15
        env:
          {
            POSTGRES_USER: postgres,
            POSTGRES_PASSWORD: postgres,
            POSTGRES_DB: products,
          }
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5
        ports: ["5432:5432"]
      order_db:
        image: postgres:15
        env:
          {
            POSTGRES_USER: postgres,
            POSTGRES_PASSWORD: postgres,
            POSTGRES_DB: orders,
          }
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5
        ports: ["5433:5432"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.10" }
      - name: Install deps
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do pip install -r "$req"; done
          pip install pytest httpx
      - name: Test product_service
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q
      - name: Test order_service
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          PRODUCT_SERVICE_URL: http://localhost:8000
        run: pytest tests --maxfail=1 --disable-warnings -q
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Login to ACR
        run: az acr login --name $ACR_NAME
      - name: Build & Push backend images
        run: |
          docker build -t $ACR_LOGIN_SERVER/product_service:latest   ./backend/product_service/
          docker push  $ACR_LOGIN_SERVER/product_service:latest
          docker build -t $ACR_LOGIN_SERVER/order_service:latest     ./backend/order_service/
          docker push  $ACR_LOGIN_SERVER/order_service:latest
          docker build -t $ACR_LOGIN_SERVER/customer_service:latest  ./backend/customer_service/
          docker push  $ACR_LOGIN_SERVER/customer_service:latest
      - name: Logout
        if: always()
        run: az logout

  frontend_ci:
    name: Frontend CI - Build & Push
    runs-on: ubuntu-latest
    needs: backend_ci
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Login to ACR
        run: az acr login --name $ACR_NAME
      - name: Build & Push frontend
        run: |
          docker build -t $ACR_LOGIN_SERVER/frontend:latest ./frontend/
          docker push  $ACR_LOGIN_SERVER/frontend:latest
      - name: Logout
        if: always()
        run: az logout

  staging_cd:
    name: CD - Staging (Deploy & Test)
    runs-on: ubuntu-latest
    needs: frontend_ci
    environment: Staging
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set kubeconfig
        run: echo "KUBECONFIG=$RUNNER_TEMP/kubeconfig" >> $GITHUB_ENV

      - name: Get AKS context
        run: |
          az aks get-credentials -g "$RG" -n "$AKS" --overwrite-existing --file "$KUBECONFIG"
          kubectl --kubeconfig "$KUBECONFIG" cluster-info

      - name: Attach ACR (idempotent)
        run: az aks update -g "$RG" -n "$AKS" --attach-acr "$ACR_NAME"

      - name: Get Storage Account Key
        id: sakey
        run: |
          KEY=$(az storage account keys list -g "$RG" -n "${{ secrets.STORAGE_ACCOUNT_NAME }}" --query "[0].value" -o tsv)
          echo "key=$KEY" >> $GITHUB_OUTPUT

      - name: Create/Update ecommerce-secret-w10t2
        run: |
          NS=default
          kubectl -n "$NS" create secret generic ecommerce-secret-w10t2 \
            --from-literal=AZURE_STORAGE_ACCOUNT_NAME='${{ secrets.STORAGE_ACCOUNT_NAME }}' \
            --from-literal=AZURE_STORAGE_ACCOUNT_KEY='${{ steps.sakey.outputs.key }}' \
            --dry-run=client -o yaml | kubectl -n "$NS" apply -f -

      - name: Deploy backend (reusable)
        id: backend
        uses: ./.github/workflows/backend_cd.yml
        with:
          aks_cluster_name: ${{ env.AKS }}
          aks_resource_group: ${{ env.RG }}

      - name: Quick health checks
        run: |
          curl --fail "http://${{ steps.backend.outputs.PRODUCT_IP }}:8000/health"
          curl --fail "http://${{ steps.backend.outputs.ORDER_IP }}:8001/health"
          curl --fail "http://${{ steps.backend.outputs.CUSTOMER_IP }}:8002/health"

      - name: Deploy frontend (reusable)
        uses: ./.github/workflows/frontend_cd.yml
        with:
          product_api_ip: "http://${{ steps.backend.outputs.PRODUCT_IP }}:8000"
          order_api_ip: "http://${{ steps.backend.outputs.ORDER_IP }}:8001"
          customer_api_ip: "http://${{ steps.backend.outputs.CUSTOMER_IP }}:8002"
          aks_cluster_name: ${{ env.AKS }}
          aks_resource_group: ${{ env.RG }}
