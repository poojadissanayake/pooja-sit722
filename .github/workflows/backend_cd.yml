name: CD - Deploy Backend to AKS (reusable)

on:
  workflow_call:
    inputs:
      aks_cluster_name:
        type: string
        required: true
      aks_resource_group:
        type: string
        required: true
      kubeconfig_path:
        type: string
        required: false
        default: ""
    outputs:
      PRODUCT_IP:
        description: "Product LB IP"
        value: ${{ jobs.deploy_backend.outputs.PRODUCT_IP }}
      ORDER_IP:
        description: "Order LB IP"
        value: ${{ jobs.deploy_backend.outputs.ORDER_IP }}
      CUSTOMER_IP:
        description: "Customer LB IP"
        value: ${{ jobs.deploy_backend.outputs.CUSTOMER_IP }}

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    outputs:
      PRODUCT_IP: ${{ steps.capture.outputs.product_ip }}
      ORDER_IP: ${{ steps.capture.outputs.order_ip }}
      CUSTOMER_IP: ${{ steps.capture.outputs.customer_ip }}
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Use provided kubeconfig (optional)
        if: ${{ inputs.kubeconfig_path != '' }}
        run: echo "KUBECONFIG=${{ inputs.kubeconfig_path }}" >> $GITHUB_ENV

      - name: Get AKS credentials (if kubeconfig not supplied)
        if: ${{ inputs.kubeconfig_path == '' }}
        run: |
          echo "KUBECONFIG=$RUNNER_TEMP/kubeconfig" >> $GITHUB_ENV
          az aks get-credentials -g "${{ inputs.aks_resource_group }}" -n "${{ inputs.aks_cluster_name }}" --overwrite-existing --file "$KUBECONFIG"

      - name: Deploy backend infra (ConfigMaps, Secrets, DBs)
        run: |
          cd k8s/
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml
          kubectl apply -f customer-db.yaml

      - name: Deploy backend services
        run: |
          cd k8s/
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml
          kubectl apply -f customer-service.yaml

      - name: Wait for LoadBalancer IPs
        id: capture
        run: |
          set -e
          SVC1=product-service-w10t2
          SVC2=order-service-w10t2
          SVC3=customer-service-w10t2
          for i in $(seq 1 60); do
            P=$(kubectl get svc $SVC1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            O=$(kubectl get svc $SVC2 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            C=$(kubectl get svc $SVC3 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$P" && -n "$O" && -n "$C" ]]; then
              echo "product_ip=$P"  >> $GITHUB_OUTPUT
              echo "order_ip=$O"    >> $GITHUB_OUTPUT
              echo "customer_ip=$C" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 5
          done
          echo "Timed out waiting for LoadBalancer IPs"; exit
