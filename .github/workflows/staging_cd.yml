name: CD - Staging (Create, Deploy, Test, Destroy All)

on:
  workflow_run:
    workflows: ["Frontend CI - Build & Push Image"]
    types:
      - completed
  workflow_dispatch:
jobs:
  # Job 1: Provision full staging infra + deploy backends and basic checks
  provision_and_deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'testing') }}
    runs-on: ubuntu-latest
    environment: Staging
    outputs:
      rg: ${{ steps.tf_out.outputs.rg }}
      aks: ${{ steps.tf_out.outputs.aks }}
      acr: ${{ steps.tf_out.outputs.acr }}
      sa_name: ${{ steps.tf_out.outputs.sa_name }}
      sa_key: ${{ steps.tf_out.outputs.sa_key }}
      img_container: ${{ steps.tf_out.outputs.img_container }}
      product_ip: ${{ steps.backend.outputs.PRODUCT_IP }}
      order_ip: ${{ steps.backend.outputs.ORDER_IP }}
      customer_ip: ${{ steps.backend.outputs.CUSTOMER_IP }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: .terraform
        run: terraform init

      - name: Terraform Apply (create RG, ACR, AKS, Storage container)
        id: tf_apply
        working-directory: .terraform
        env:
          TF_VAR_acr_name: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
        run: terraform apply -auto-approve

      - name: Read Terraform Outputs
        id: tf_out
        working-directory: .terraform
        run: |
          echo "rg=$(terraform output -raw staging_rg_name)" >> $GITHUB_OUTPUT
          echo "aks=$(terraform output -raw staging_aks_name)" >> $GITHUB_OUTPUT
          echo "acr=$(terraform output -raw acr_name)" >> $GITHUB_OUTPUT
          echo "sa_name=$(terraform output -raw storage_account_name)" >> $GITHUB_OUTPUT
          echo "sa_key=$(terraform output -raw storage_account_key)"  >> $GITHUB_OUTPUT
          echo "img_container=$(terraform output -raw product_images_container)" >> $GITHUB_OUTPUT

      - name: Set KUBECONFIG path
        run: echo "KUBECONFIG=$RUNNER_TEMP/kubeconfig" >> $GITHUB_ENV
      - name: Get AKS credentials (staging)
        run: |
          az aks get-credentials -g "${{ steps.tf_out.outputs.rg }}" -n "${{ steps.tf_out.outputs.aks }}" --overwrite-existing --file "$KUBECONFIG"
          kubectl --kubeconfig "$KUBECONFIG" cluster-info

      - name: Attach ACR to AKS
        run: az aks update -g "${{ steps.tf_out.outputs.rg }}" -n "${{ steps.tf_out.outputs.aks }}" --attach-acr "${{ steps.tf_out.outputs.acr }}"

      - name: Create/Update ecommerce-secret-w10t2 with storage creds
        shell: bash
        run: |
          NS=default
          kubectl --kubeconfig "$KUBECONFIG" -n "$NS" create secret generic ecommerce-secret-w10t2 \
            --from-literal=AZURE_STORAGE_ACCOUNT_NAME='${{ steps.tf_out.outputs.sa_name }}' \
            --from-literal=AZURE_STORAGE_ACCOUNT_KEY='${{ steps.tf_out.outputs.sa_key }}' \
            --dry-run=client -o yaml | kubectl --kubeconfig "$KUBECONFIG" -n "$NS" apply -f -

      - name: Deploy backend infra (ConfigMaps/Secrets/DBs)
        id: backend
        uses: ./.github/workflows/backend_cd.yml
        with:
          aks_cluster_name: ${{ steps.tf_out.outputs.aks }}
          aks_resource_group: ${{ steps.tf_out.outputs.rg }}
          kubeconfig_path: ${{ env.KUBECONFIG }}

      - name: Quick acceptance checks
        run: |
          curl --fail "http://${{ steps.backend.outputs.PRODUCT_IP }}:8000/health"
          curl --fail "http://${{ steps.backend.outputs.ORDER_IP }}:8001/health"
          curl --fail "http://${{ steps.backend.outputs.CUSTOMER_IP }}:8002/health"

  # Job 2: (after manual approval window) Deploy frontend and DESTROY EVERYTHING (full terraform destroy)
  finalize_and_destroy:
    runs-on: ubuntu-latest
    needs: provision_and_deploy
    environment: Staging
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # deploy the frontend for end-to-end testing before destroy
      - name: Deploy Frontend (reusable)
        uses: ./.github/workflows/frontend_cd.yml
        with:
          product_api_ip: "http://${{ needs.provision_and_deploy.outputs.product_ip }}:8000"
          order_api_ip: "http://${{ needs.provision_and_deploy.outputs.order_ip }}:8001"
          customer_api_ip: "http://${{ needs.provision_and_deploy.outputs.customer_ip }}:8002"
          aks_cluster_name: ${{ needs.provision_and_deploy.outputs.aks }}
          aks_resource_group: ${{ needs.provision_and_deploy.outputs.rg }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Destroy (DESTROY EVERYTHING)
        working-directory: .terraform
        env:
          TF_VAR_acr_name: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
        run: |
          # This removes ALL resources created
          terraform destroy -auto-approve
